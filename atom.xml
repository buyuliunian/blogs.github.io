<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不语流年</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-15T02:24:39.926Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>不语</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>架构</title>
    <link href="http://yoursite.com/2020/jvm%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/jvm基础/</id>
    <published>2020-04-13T00:54:52.447Z</published>
    <updated>2020-04-15T02:24:39.926Z</updated>
    
    <content type="html"><![CDATA[<p>系统架构</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统架构&lt;/p&gt;

      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>cap基础理论</title>
    <link href="http://yoursite.com/2019/cap%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/cap基础理论/</id>
    <published>2019-07-30T12:41:08.000Z</published>
    <updated>2020-04-13T00:52:28.144Z</updated>
    
    <content type="html"><![CDATA[<p>经典 CAP<br>C：Consistency，一致性，所有数据变动都是同步的。<br>A：Availability，可用性，即在可以接受的时间范围内正确地响应用户请求。<br>P：Partition tolerance，分区容错性，即某节点或网络分区故障时，系统仍能够提供满足一致性和可用性的服务</p><a id="more"></a><p>BASE 理论<br>BA：Basically Available，基本可用。<br>S：Soft State，软状态，状态可以有一段时间不同步。<br>E：Eventually Consistent，最终一致，最终数据是一致的就可以了，而不是时时保持强一致。</p><p>如：下单支付系统 ，支付成功，订单成功，积分失败，则不需要回滚支付和订单，补偿积分即可，若支付失败，订单成功，积分成功，则需要回滚。<br>(1)案列：两段式提交，准备阶段和提交/回滚阶段<br>    1、从第一阶段的准备阶段，业务所涉及的数据就被锁定，并且锁定跨越整个提交流程<br>    2、提交/回滚阶段是 反可伸缩模式 的，业务规模越大，涉及模块越多，局限性越大，系统可伸缩性越差</p><p>(2) 可靠消息最终一致性<br>(3) TCC（Try-Confirm-Cancel）<br>(4) 最大努力通知<br>上游应用，发消息到 MQ 队列。<br>下游应用（例如短信服务、邮件服务），接受请求，并返回通知结果。<br>最大努力通知服务，监听消息队列，将消息存储到数据库中，并按照通知规则调用下游应用的发送通知接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经典 CAP&lt;br&gt;C：Consistency，一致性，所有数据变动都是同步的。&lt;br&gt;A：Availability，可用性，即在可以接受的时间范围内正确地响应用户请求。&lt;br&gt;P：Partition tolerance，分区容错性，即某节点或网络分区故障时，系统仍能够提供满足一致性和可用性的服务&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/hello-world/"/>
    <id>http://yoursite.com/2019/hello-world/</id>
    <published>2019-07-30T12:41:08.000Z</published>
    <updated>2019-07-31T10:34:28.453Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;一直有想法要写点东西，但都比较散乱零碎，之前有在笔记本和有道云笔记写过一点，都不成系统。而今时间稍微富裕点，正好tom有说到他的博客，遂做了一个，作为以后学习记录留存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;一直有想法要写点东西，但都比较散乱零碎，之前有在笔记本和有道云笔记写过一点，都不成系统。而今时间稍微富裕点，正好tom有说到他的博客，遂做了一个，作为以后学习记录留存。&lt;/p&gt;

      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
